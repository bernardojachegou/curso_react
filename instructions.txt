Curso ReactJS (Rocketseat)
Informações sobre ReactJS
----------------------------------------------------------------------------------------------------------------
INFORMAÇÕES básicas:
-Biblioteca específica para criação de interfaces que:
-Surgiu em 2011 devido uma necessidade real
-Faz o mesmo que o javascript puro faz de maneira organizada
-É utilizada para manipular a DOM do projeto
-É Muito utilizada para SPAs
-Geralmente retorna os dados em JSON (Utlizavel em API REST)
-Frontend mais flexível
-Organização exemplar devido a componetização
----------------------------------------------------------------------------------------------------------------
CONCEITO de componentização:
O componente é um conjunto de parte visual (hmtl) + a parte funcional (js) + estilização (css).
SIMPLE COMPONENT
-É uma classe
-Extende a classe Component
-Utiliza o método render()
-Utiliza HTML (JSX)
-Codígo HTML manipulado pelo JS
----------------------------------------------------------------------------------------------------------------
ESTRUTURA do projeto:
-> node_modules = dependências do projeto
-> public = arquivos acessíveis diretamente pelo usuário final da aplicação
-> src = pasta que guarda o código da aplicação (css, arquivo de teste, logo, etc...)
-> .gitignore = ignorar arquivos que não precisam subir no git
-> packpage.json = dependências utilizadas e comandos para rodar a aplicação (scripts)
----------------------------------------------------------------------------------------------------------------
Preparando projeto com ReactJS (Básico)
NO TERMINAL:
npm install create-react-app 
create-react-app nome_do_projeto
----------------------------------------------------------------------------------------------------------------
1. Manipulando o PROJETO:
1.1 Apagar arquivos da pasta src
1.2 Remover import não mais necessários (index.js e App.js)
1.3 Modificar arquivo App.js (Hello World)
1.4 NPM Start (testar funcionamento)
----------------------------------------------------------------------------------------------------------------
1. Criando o HEADER:
1.1 Criar pastas e arquivos: src/components/Header/index.js
2. Dentro do index.js:
2.1 Fazer import do React
2.2 criar cost (variável) com a função Header = stateless
2.3 dentro da função: tag header id="main-header"
2.4 Fazer um export default
2.5 Fazer import do header no App.js
----------------------------------------------------------------------------------------------------------------
1. Estilização do COMPONENTE:
1.1 Criar arquivo style na pasta Header
1.2 Fazer import dentro do index.js da pastar Header
----------------------------------------------------------------------------------------------------------------
1. Arrumar ESTILIZAÇÃO GLOBAL:
1.1 Criar o arquivo styles.css dentro da pasta src
1.2 Fazer o import do arquivo no APP.js
1.3 Setar estilização global {margin, padding, outline e box-sizing}
1.4 No body acrescentar um font-family, background e color
----------------------------------------------------------------------------------------------------------------
1. Integração com o BACKEND:
1.1 Instalção do axios: -yarn add axios-
1.2 Criar pasta services dentro da pasta src
1.3 Criar arquivo api.js dentro do services
1.4 Fazer import do axios
1.5 Criar cost api com método axios.create e baseURL
1.6 Fazer um export default api
1.7 Fazer um import dentro do App.js
----------------------------------------------------------------------------------------------------------------
2. Criar a lógica para a conexão com o backend:
2.1 Criar pasta e arquivo src/pages/main/index.js
2.2 Fazer import do react e component
2.3 Fazer o export default da class Main (extends Component) com método render()
2.4 Passar import da api pra dentro do main/index.js
2.5 Fazer import main/index.js dentro do App.js
----------------------------------------------------------------------------------------------------------------
1. Buscando informações na rota da API:
1.1 Métodos de ciclo de vida = COmponentDidMount() { this.loadProducts(); }
1.2 Criar a função loadProducts utilizando arrow function
1.3 Criar uma const response com async e await + api.get('/products')
1.4 console.log no response (teste)
----------------------------------------------------------------------------------------------------------------
ATENÇÃO: Métodos que pertencem ao React usa função normal, função criada pelo dev deve ser em arrow function
----------------------------------------------------------------------------------------------------------------
1. Armazenando os valores do BACKEND:
1.1 Utilizar o conceito de state/object
1.2 Fazer uso do state devido ao método render (praticidade)
1.3 Método render() para retorno da parte visual
1.4 Produtos listados utilizando o método map()
----------------------------------------------------------------------------------------------------------------
1. Listando os PRODUTOS:
1.1 criar tag article dentro da render() utilizando a key={product_id}
1.2 >strong< com {product.title}
1.3 >p< com {product.description}
1.4 >a< para acessar os detalhes do produto
1.5 Estilizar a listagem de produtos criando um arquivo css dentro do mesmo diretório
----------------------------------------------------------------------------------------------------------------
1. Criando página ANTERIOR/PRÓXIMA:
1.1 Criar botões no index.js e pesonalizar div com id="actions"
1.2 Personalizar a div e o button
>div<
display: flex - justify content: space-between - margin-botton: 20px
>button<
padding - border-radius - border - background - color - font-size - font-weight - cursor - hover 
----------------------------------------------------------------------------------------------------------------
1. Criando a funcionalidade dos BOTÕES:
1.1 Utilizar o método onClick={this.prevPage & nextPage}
1.2 Cria as funções prevPage e nextPage
1.3 Criar uma propriedade productInfo: {} (dentro do state)
1.4 Criar cost dentro do loadProducts = cost { docs, ...productInfo } = response.data;
1.5 Modificar products: docs, productInfo
1.6 Cria a propriedade page dentro do state setando page = 1
1.7 Criar a lógica da função nextPage e prevPage
1.8 Desabilitar retorno quando não tiver pagina anterior ou proxima (função disable)
----------------------------------------------------------------------------------------------------------------
1. Configurando NAVEGAÇÃO (Rotas):
1.1 instalar react-router-dom
1.2 Criar arquivo router.js
1.3 Configurar arquivo router.js
1.4 Importar rotas dentro do App.js
1.5 criar pasta products dentro da pasta pages
1.6 criar arquivo index.js dentro da pasta products
1.7 configurar o arquivo routes.js para exibir a pagina
----------------------------------------------------------------------------------------------------------------
1. Navegando por DETALHES:
1.1 Cria a lógica do arquivo que irá exibir os detalhes do produto
1.2 Criar estilização para detalhes do produto